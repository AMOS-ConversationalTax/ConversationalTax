import { Controller, Post, Body, UseInterceptors, FileInterceptor, UploadedFile, Query, BadRequestException } from '@nestjs/common';
import { DialogFlowService } from './dialog-flow/dialog-flow.service';
import { AudioIntentParams, TextIntentParams, TextIntentBody } from './lang.dto';
import { UserService } from '../database/user/user.service';
import { EmploymentContractService } from '../database/employmentContract/employmentContract.service';
import { ExplanationService } from './explanation/explanation.service';
import { DatabaseLangService } from '../connectors/database-lang.service';
import { ConversationHistory } from '../database/conversationHistory/interfaces/conversationHistory.interface';
import { IntentStrategy } from './intents/strategy/strategy.intent';

const ANDROID_AUDIO_SETTINGS = {
  encoding: 'AUDIO_ENCODING_AMR_WB',
  sampleRate: 16000,
};

const IOS_AUDIO_SETTINGS = {
  encoding: 'AUDIO_ENCODING_LINEAR_16',
  sampleRate: 16000,
};

const INTENT_HELP = 'projects/test-c7ec0/agent/intents/e695c10c-0a85-4ede-a899-67f264ff5275';
const INTENT_CONTEXT = 'projects/test-c7ec0/agent/intents/39611549-cad9-4152-9130-22ed7879e700';
const INTENT_DEFAULT = 'projects/test-c7ec0/agent/intents/41d8bfa1-b463-4d15-a1ea-9491f5ee1a76';

@Controller('lang')
export class LangController {

  constructor(
    private dialogFlowService: DialogFlowService,
    private userService: UserService,
    private contractService: EmploymentContractService,
    private explanationService: ExplanationService,
    private databaseLangService: DatabaseLangService,
    private intentStrategy: IntentStrategy,
  ) {}

  @Post('text')
  async textIntent(@Body() body: TextIntentBody, @Query() params: TextIntentParams) {
    const dialogflowResponse = await this.dialogFlowService.detectTextIntent(body.textInput, params.u_id);
    return this.handleResponse(dialogflowResponse[0], params);
  }

  @Post('audio_upload')
  @UseInterceptors(FileInterceptor('file'))
  async uploadFile(@UploadedFile() file, @Query() params: AudioIntentParams) {
    console.log('****lang.controller: File received ******');
    const dialogflowResponse = await this.processAudiofile(file, params);
    return this.handleResponse(dialogflowResponse[0], params);
  }

  private async handleResponse(
    dialogflowResponse: DetectIntentResponse,
    params: TextIntentParams | AudioIntentParams,
  ): Promise<ReturnText> {

    if (dialogflowResponse.queryResult.queryText === '') {
      return { text: '' };
    }

    const intent = this.dialogFlowService.extractResponseIntent(dialogflowResponse);
    const actionName = this.dialogFlowService.extractResponseAction(dialogflowResponse);

    if (intent !== null && intent !== undefined) {
      const response = await this.handleIntent(params.u_id, intent, dialogflowResponse);
      if (response !== undefined) {
        await this.createConversationHistoryEntry(params.u_id, dialogflowResponse, response.text, intent, actionName);
        return response;
      }
    }

    const text = this.dialogFlowService.extractResponseText(dialogflowResponse);
    await this.createConversationHistoryEntry(params.u_id, dialogflowResponse, text, intent, actionName);
    return { text };
  }

  /**
   * Converts the received audio to Base64 and hands it to the DialogFlow service.
   * @param file The uploaded file.
   * @param params URL params which contain the userID as well as the platform.
   * @returns {Promise<DetectIntentResponse[]>} - A promise containing the response
   */
  private async processAudiofile(file: any, params: AudioIntentParams): Promise<DetectIntentResponse[]> {
    if (file === undefined || file.buffer === undefined) {
      throw new BadRequestException('No audio file was uploaded');
    }
    const base64Audio: string = file.buffer.toString('base64');

    let encoding: string;
    let sampleRate: number;
    if (params.platform === 'android') {
      encoding = ANDROID_AUDIO_SETTINGS.encoding;
      sampleRate = ANDROID_AUDIO_SETTINGS.sampleRate;
    } else if (params.platform === 'ios') {
      encoding = IOS_AUDIO_SETTINGS.encoding;
      sampleRate = IOS_AUDIO_SETTINGS.sampleRate;
    } else {
      throw new BadRequestException('Unkown platform');
    }

    return await this.dialogFlowService.detectAudioIntent(encoding, sampleRate, base64Audio, params.u_id);
  }

  /**
   * Create a new conversation history entry (helper funtion)
   * @param uid The id of the user
   * @param dialogflowResponse The response object of dialogflow
   * @param responseText The response to be logged (may be either the fulfillmentText of dialogflow
   * or a response generated by our code)
   * @param intent The recognized intent
   * @param actionName The recognized action
   */
  private async createConversationHistoryEntry(uid: string,
                                               dialogflowResponse: DetectIntentResponse,
                                               responseText: string,
                                               intent: Intent,
                                               actionName: string) {

    let parameters: any = { fields: {} };
    let queryText: string = 'Not specified';
    let intentName: string = 'Not specified';
    let intentDisplayName: string = 'Not specified';

    if ( dialogflowResponse.hasOwnProperty('queryResult') ) {

      if ( dialogflowResponse.queryResult.hasOwnProperty('parameters') ) {

        parameters = dialogflowResponse.queryResult.parameters;

      }

      if ( dialogflowResponse.queryResult.hasOwnProperty('queryText') ) {

        queryText = dialogflowResponse.queryResult.queryText;

      }

    }

    if ( intent !== null ) {

      if ( intent.hasOwnProperty('name') ) {

        intentName = intent.name;

      }

      if ( intent.hasOwnProperty('displayName') ) {

        intentDisplayName = intent.displayName;

      }

    }

    // Add a new conversation history entry to the data store
    await this.databaseLangService.createConversationHistoryEntry(uid,
                                                                  parameters,
                                                                  queryText,
                                                                  responseText,
                                                                  intentName,
                                                                  intentDisplayName,
                                                                  actionName);

  }

  // TODO move to new architecture as soon as it has been finished.
  // TODO intent name should be moved into a const (as part of the above task)
  private async handleIntent(uid: string, intent: Intent, dialogflowResponse: DetectIntentResponse): Promise<ReturnText | undefined> {
    const intentHandler = this.intentStrategy.createIntentHandler(intent.name);
    if (intentHandler !== null) {
        const responseParam = this.dialogFlowService.extractParameter(dialogflowResponse);
        const allParamSet = this.dialogFlowService.extractReqParameterPresent(dialogflowResponse);

        const intentData: IIntentData = {parameter: responseParam, allParameterSet: allParamSet, user: uid, intentList: [ INTENT_HELP,
                                                                                                                          INTENT_CONTEXT,
                                                                                                                          INTENT_DEFAULT]};
        return intentHandler.handle(intentData);
    }
  }

}
